%YAML 1.2
---

name: Wolfram

file_extensions: ["wl", "m", "wls", "wlt", "mt"]

scope: source

contexts:

  main:
    - include: shebang
    - include: package_items
    - include: toplevel_definitions
    - include: simple_toplevel_definition
    - include: metafunction_toplevel_definitions
    - include: expressions

  definitions_only:
    - include: toplevel_definitions
    - include: simple_toplevel_definition
    - include: expressions

  prototype:
    - include: comments

  shebang:
    - match: '\A(#!).*(?=$)'
      scope: comment.line.shebang
      captures:
        1: punctuation.definition.comment

  toplevel_definitions:
    - match: '^\s*(?={{symbolSegment}} = CaseOf\[)'
      push:
#        - match: '\s+'
        - match: '(?={{symbolSegment}})'
          set: [caseof_rhs, any_definition_target]
    - match: '^\s*(?={{definitionAcceptors}}\[[^\n]+ := )'
      push: acceptor_lhs
    - match: '^\s*(?=[A-Z][^\n]+ := )'
#      scope: entity.name.function
      push:
#        - match: '\s+'
        - match: '(?=[A-Z])'
          set: [sd_lhs, definition_target]

  caseof_rhs:
    - match: '\s+'
    - match: '='
      scope: keyword.operator.assignment.SetDelayed
      pop: true

  acceptor_lhs:
    - match: '[ \n\t]+'
    - match: '{{definitionAcceptors}}(?=\s*\[)'
      scope: support.function.box
    - match: '\['
      scope: punctuation.section.brackets.begin
      push:
        - match: '(?=[A-Z])'
          pop: true
          push: [acceptor_args, definition_args, definition_target]
    - match: ':='
      scope: keyword.operator.assignment.SetDelayed
      pop: true

  definition_args:
    - match: '\['
      scope: punctuation.section.brackets.begin
      push:
        - meta_scope: meta.brackets
        - match: '\]'
          scope: punctuation.section.brackets.end
          pop: true
        - include: expressions
    - match: '(?!\[)'
      pop: true

  acceptor_args:
    - match: '\]'
      scope: punctuation.section.brackets.end
      pop: true
    - include: expressions

  any_definition_target:
    - meta_scope: entity.name.function meta.def
    - match: '[a-z]{{symbolSegment}}'
      pop: true
    - include: core_sym
    - include: library_sym

  definition_target:
    - meta_scope: entity.name.function meta.def
    - include: core_sym
    - include: library_sym
    - include: unexpected_sym

  sd_lhs:
    - match: '\s+'
    - match: '\['
      scope: punctuation.section.brackets.begin
      push:
        - meta_scope: meta.brackets
        - match: '\]'
          scope: punctuation.section.brackets.end
          pop: true
        - include: expressions
    - match: ':='
      scope: keyword.operator.assignment.SetDelayed
      pop: true

  simple_toplevel_definition:
    - match: ^\s*(Attributes|Format|Options)\s*(\[)({{symbolSegment}})(\])\s*(:=|=(?!!|=|\.))
      captures:
        1: support.function.builtin
        2: punctuation.section.brackets.begin
        3: meta.def meta.function entity.name.function
        4: punctuation.section.brackets.end
        5: keyword.operator.assignment
    - match: ^\s*({{symbolSegment}})(?=(\[(?>[^\[\]]+|\g<-1>)*\])\s*(?:/;.*)?(?::=|=(?!!|=|\.)))
      captures:
        1: meta.def meta.function entity.name.function
    - match: ^\s*({{symbolSegment}})(?=(\[(?>[^\[\]]+|\g<-1>)*\])(\[(?>[^\[\]]+|\g<-1>)*\])\s*(?:/;.*)?(?::=|=(?!!|=|\.)))
      captures:
        1: meta.def meta.function entity.name.function meta.def
    - match: ^\s*({{symbolSegment}})(?=\s*(?:/;.*)?(?::=|=) (?:Case))
      captures:
        1:meta.def meta.function entity.name.function
    - match: ^\s*(\${{symbolSegment}})(?=\s*(?:/;.*)?(?::=|=(?!!|=|\.)))
      captures:
        1: meta.def meta.function entity.name.constant variable.global meta.def
    - match: ^\s*({{symbolSegment}})(?=\s*(?:/;.*)?(?::=|=(?!!|=|\.)))
      captures:
        1: meta.def meta.function entity.name.constant variable.local meta.def

  package_items:
    - match: '({{CorePackageDeclaration}})\['
      captures:
        1: meta.pkg.dec
      push: package_items_block

  package_items_block:
    - meta_scope: meta.pkg.symlist
    - match: ']'
      pop: true
    - match: ','
    - match: ' '
    - match: '->'
    - match: '(?=[$a-zA-Z])'
      push: definition_target
    - match: '.'
      scope: invalid.illegal

  # metafunction_toplevel_definitions:
  #   - match: '^\s*(?=Define[A-Za-z]+Rules(\[))'
  #     push: defining_rules_metafunction_call
  #   - match: '^\s*(?=Declare[A-Za-z]+(\[| @ ))'
  #     push: declaring_metafunction_call
  #   - match: '^\s*(?=[A-Za-z]+Definitions(\[)\s*\n)'
  #     push: definitions_metafunction_call

  metafunction_toplevel_definitions:
    - match: '^\s*{{defineMacroApplied}}'
      push: defining_macro_call
    - match: '^\s*{{declareFnApplied}}'
      push: declaring_metafunction_call
    - match: '^\s*{{defineRulesFnApplied}}'
      push: defining_rules_metafunction_call
    - match: '^\s*{{definitionsFnApplied}}'
      push: definitions_metafunction_call

  defining_macro_call:
    - match: '({{MetaFunction}})(\[)'
      captures:
        1: fn.meta
        2: punctuation.section.brackets.begin
      push: [end_bracket, single_expression, comma, defined_symbol_arg]
      pop: true
    - match: '[A-Za-z]+'
      scope: invalid.inappropriate
      pop: true

  definitions_metafunction_call:
    - match: '({{MetaFunction}}) (@)'
      captures:
        1: fn.meta
        2: keyword.operator
      push: [defined_symbol_arg]
      pop: true
    - match: '({{MetaFunction}})(\[)'
      captures:
        1: fn.meta
        2: punctuation.section.brackets.begin
      embed: definitions_only
      escape: '^\]'
      embed_scope: meta.brackets
      escape_captures:
        0: punctuation.section.brackets.end
      pop: true

  defining_rules_metafunction_call:
    - match: '({{MetaFunction}})(\[)'
      captures:
        1: fn.meta
        2: punctuation.section.brackets.begin
      push: [end_bracket, defined_symbol_rule_sequence]
      pop: true
    - match: '[A-Za-z]+'
      scope: invalid.inappropriate
      pop: true

  # defining_metafunction_call:
  #   - match: '({{MetaFunction}})(\[)'
  #     captures:
  #       1: fn.meta
  #       2: punctuation.section.brackets.begin
  #     push: [end_bracket, single_expression, comma, defined_symbol_or_list]
  #     pop: true
  #   - match: '[A-Za-z]+'
  #     scope: invalid.inappropriate
  #     pop: true

  declaring_metafunction_call:
    - match: '({{MetaFunction}}) (@)'
      captures:
        1: fn.meta
        2: keyword.operator
      push: [defined_symbol_arg]
      pop: true
    - match: '({{MetaFunction}})(\[)'
      captures:
        1: fn.meta
        2: punctuation.section.brackets.begin
      push: [end_bracket, defined_symbol_sequence]
      pop: true
    - match: '[A-Za-z]+'
      scope: invalid.inappropriate
      pop: true

  defined_symbol_or_list:
    - match: '\s+'
    - match: '\{'
      push: defined_symbol_sequence
    - match: '(?={{symbolSegment}})'
      push: any_definition_target
    - match: ''
      pop: true

  defined_symbol:
    - match: '\s+'
    - match: '(?={{symbolSegment}})'
      set: any_definition_target
    - match: ''
      pop: true

  defined_symbol_arg:
    - match: '\s+'
    - match: '{{declareFnApplied}}'
      push: declaring_metafunction_call
    - match: '(?={{symbolSegment}})'
      push: any_definition_target
    # - match: ','
    #   scope: keyword.operator.Comma
    - match: ''
      pop: true

  defined_symbol_rule_sequence:
    - match: '\s+'
    - match: '(?={{symbolSegment}}\s*(->|:>))'
      push:
      - match: '\s*'
      - match: '(?={{symbolSegment}})'
        push: any_definition_target
      - match: '(->|:>)'
        scope: keyword.operator
        set: single_expression
    - match: ','
      scope: keyword.operator.Comma
    - match: '(?=[}\]])'
      pop: true
    - match: '.'
      scope: invalid.illegal

  defined_symbol_sequence:
    - match: '\s+'
    # - match: '{{declareFnApplied}}'
    #   push: declaring_metafunction_call
    - match: '(?={{symbolSegment}})'
      push: any_definition_target
    - match: ','
      scope: keyword.operator.Comma
    - match: '(?=[}\]])'
      pop: true
    - match: '.'
      scope: invalid.illegal

  comma:
    - match: (?:,)
      scope: keyword.operator.Comma punctuation.separator
      pop: true
    - match: '.'
      scope: invalid.illegal

  end_bracket:
    - match: '\]'
      scope: punctuation.section.brackets.end
      pop: true
    - match: '.'
      scope: invalid.illegal

  single_expression:
    - match: '(?=[,\]])'
      pop: true
    - include: expressions

  expression:
    - include: escaped_character_symbols
    - include: escaped_characters
    - include: out
    - include: slot
    - include: literals
    - include: groups
    - include: stringifying_operators
    - include: operators
    - include: pattern_operators
    - include: library_symbols
    - include: core_symbols
#    - include: obselete_symbols
    - include: builtin_symbols
    - include: internal_symbols
    - include: user_symbols
    - match: '(?=[],)}])'
      pop: true

  expressions:
    - include: escaped_character_symbols
    - include: escaped_characters
    - include: out
    - include: slot
    - include: literals
    - include: groups
    - include: stringifying_operators
    - include: operators
    - include: pattern_operators
    - include: library_symbols
    - include: core_symbols
#    - include: obselete_symbols
    - include: builtin_symbols
    - include: internal_symbols
    - include: user_symbols
    - match: '{{punctuationChar}}'
      scope: invalid.illegal

  comments:
    - match: \(\*
      scope: punctuation.definition.comment
      push: comment-block
    - match: \*\)
      scope: invalid.illegal.stray-comment-end

  comment-block:
    - meta_scope: comment.block
    - match: \(\*
      scope: punctuation.definition.comment
      push: comment-block
    - match: \*\)
      scope: punctuation.definition.comment
      pop: true
    - match: .

  escaped_character_symbols:
    - match: System`\\\[{{systemLongNames_F}}\]{{symbolEndBoundary}}
      scope: constant.language
    - match: System`\\\[{{systemLongNames_S}}\]{{symbolEndBoundary}}
      scope: constant.language
    - match: \\\[{{systemLongNames_F}}\]{{symbolEndBoundary}}
      scope: constant.language
    - match: \\\[{{systemLongNames_S}}\]{{symbolEndBoundary}}
      scope: constant.language
    - match: \\\[{{specialLongNames_D}}\]{{symbolEndBoundary}}
      scope: constant.language
    - match: \\\[{{specialLongNames_E}}\]{{symbolEndBoundary}}
      scope: constant.language
    - match: \\\[{{specialLongNames_I}}\]{{symbolEndBoundary}}
      scope: constant.language
    - match: \\\[{{specialLongNames_P}}\]{{symbolEndBoundary}}
      scope: constant.language

  escaped_characters:
    - match: \\[!%&()*+/@^_` ]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{unsupportedLongNames_C}}\]
      scope: invalid.illegal.unsupported
    - match: \\\[{{unsupportedLongNames_I}}\]
      scope: invalid.illegal.unsupported
    - match: \\\[{{freeLongNames_A}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_B}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_C}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_D}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_E}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_F}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_G}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_H}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_I}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_J}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_K}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_L}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_M}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_N}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_O}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_P}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_Q}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_R}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_S}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_T}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_U}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_V}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_W}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_X}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_Y}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{freeLongNames_Z}}\]
      scope: donothighlight.constant.character.escape
    - match: \\\[{{symbolSegment}}?\]?
      scope: invalid.illegal.BadLongName
    - match: \\{{symbolSegment}}\]
      scope: invalid.illegal.BadLongName
    - match: \\:\h{4}
      scope: donothighlight.constant.character.escape
    - match: \\:\h{1,3}
      scope: invalid.illegal
    - match: \\\.\h{2}
      scope: donothighlight.constant.character.escape
    - match: \\\.\h{1}
      scope: invalid.illegal
    - match: \\\|0\h{5}
      scope: donothighlight.constant.character.escape
    - match: \\\|10\h{4}
      scope: donothighlight.constant.character.escape
    - match: \\\|\h{1,6}
      scope: invalid.illegal
    - match: \\[0-7]{3}
      scope: donothighlight.constant.character.escape
    - match: \\[0-7]{1,2}
      scope: invalid.illegal
    - match: \\$
      scope: donothighlight.constant.character.escape punctuation.separator.continuation
    - match: \\.
      scope: invalid.illegal

  string_escaped_characters:
    - match: \\[bfnrt"\\<>]
      scope: donothighlight.constant.character.escape
    - include: escaped_characters

  literals:
    - include: numbers
    - include: raw_strings
    - include: strings

  numbers:
    - match: '2\^\^{{binary}}{{accuracy}}{{exponent}}'
      scope: constant.numeric
    - match: '2\^\^{{binary}}{{accuracy}}\*\^'
      scope: invalid.illegal
    - match: '2\^\^{{binary}}{{accuracy}}'
      scope: constant.numeric
    - match: '2\^\^{{binary}}``'
      scope: invalid.illegal
    - match: '2\^\^{{binary}}{{precision}}{{exponent}}'
      scope: constant.numeric
    - match: '2\^\^{{binary}}{{precision}}\*\^'
      scope: invalid.illegal
    - match: '2\^\^{{binary}}{{precision}}'
      scope: constant.numeric
    - match: '2\^\^{{binary}}{{exponent}}'
      scope: constant.numeric
    - match: '2\^\^{{binary}}\*\^'
      scope: invalid.illegal
    - match: '2\^\^{{binary}}'
      scope: constant.numeric
    - match: '2\^\^'
      scope: invalid.illegal
    - match: '8\^\^{{octal}}{{accuracy}}{{exponent}}'
      scope: constant.numeric
    - match: '8\^\^{{octal}}{{accuracy}}\*\^'
      scope: invalid.illegal
    - match: '8\^\^{{octal}}{{accuracy}}'
      scope: constant.numeric
    - match: '8\^\^{{octal}}``'
      scope: invalid.illegal
    - match: '8\^\^{{octal}}{{precision}}{{exponent}}'
      scope: constant.numeric
    - match: '8\^\^{{octal}}{{precision}}\*\^'
      scope: invalid.illegal
    - match: '8\^\^{{octal}}{{precision}}'
      scope: constant.numeric
    - match: '8\^\^{{octal}}{{exponent}}'
      scope: constant.numeric
    - match: '8\^\^{{octal}}\*\^'
      scope: invalid.illegal
    - match: '8\^\^{{octal}}'
      scope: constant.numeric
    - match: '8\^\^'
      scope: invalid.illegal
    - match: '16\^\^{{hexadecimal}}{{accuracy}}{{exponent}}'
      scope: constant.numeric
    - match: '16\^\^{{hexadecimal}}{{accuracy}}\*\^'
      scope: invalid.illegal
    - match: '16\^\^{{hexadecimal}}{{accuracy}}'
      scope: constant.numeric
    - match: '16\^\^{{hexadecimal}}``'
      scope: invalid.illegal
    - match: '16\^\^{{hexadecimal}}{{precision}}{{exponent}}'
      scope: constant.numeric
    - match: '16\^\^{{hexadecimal}}{{precision}}\*\^'
      scope: invalid.illegal
    - match: '16\^\^{{hexadecimal}}{{precision}}'
      scope: constant.numeric
    - match: '16\^\^{{hexadecimal}}{{exponent}}'
      scope: constant.numeric
    - match: '16\^\^{{hexadecimal}}\*\^'
      scope: invalid.illegal
    - match: '16\^\^{{hexadecimal}}'
      scope: constant.numeric
    - match: '16\^\^'
      scope: invalid.illegal
    - match: '{{decimal}}{{accuracy}}{{exponent}}'
      scope: constant.numeric
    - match: '{{decimal}}{{accuracy}}\*\^'
      scope: invalid.illegal
    - match: '{{decimal}}{{accuracy}}'
      scope: constant.numeric
    - match: '{{decimal}}``'
      scope: invalid.illegal
    - match: '{{decimal}}{{precision}}{{exponent}}'
      scope: constant.numeric
    - match: '{{decimal}}{{precision}}\*\^'
      scope: invalid.illegal
    - match: '{{decimal}}{{precision}}'
      scope: constant.numeric
    - match: '{{decimal}}{{exponent}}'
      scope: constant.numeric
    - match: '{{decimal}}\*\^'
      scope: invalid.illegal
    - match: '{{decimal}}'
      scope: constant.numeric

  raw_strings:
    - match: \"\"\"
      scope: punctuation.definition.rawstring.begin
      push:
        - meta_scope: string.quoted.triple
        - meta_include_prototype: false
        - match: \"\"\"
          scope: punctuation.definition.string.end
          pop: true
        - match: .

  strings:
    - match: \"
      scope: punctuation.definition.string.begin
      push:
        - meta_scope: string.quoted.double
        - meta_include_prototype: false
        - match: \"
          scope: punctuation.definition.string.end
          pop: true
        - include: string_escaped_characters
        - match: .

  stringifying_operators:
    - match: (>>>)(?=\s*")
      captures:
        1: keyword.operator.PutAppend
    - match: (>>>)\s*(\w+)
      captures:
        1: keyword.operator.PutAppend
        2: string.unquoted
    - match: '>>>'
      scope: invalid.illegal
    - match: (::)(?=")
      captures:
        1: keyword.operator.MessageName
    - match: (::)([[:alpha:]][[:alnum:]]*)
      captures:
        1: keyword.operator.MessageName
        2: string.unquoted.messagename
    - match: '::'
      scope: invalid.illegal
    - match: (<<)(?=\s*")
      captures:
        1: keyword.operator.Get
    - match: (<<)\s*([`[:alpha:]][`[:alnum:]]*)
      captures:
        1: keyword.operator.Get
        2: string.unquoted
    - match: '<<'
      scope: invalid.illegal
    - match: (>>)(?=\s*")
      captures:
        1: keyword.operator.Put
    - match: (>>)\s*(\w+)
      captures:
        1: keyword.operator.Put
        2: string.unquoted
    - match: '>>'
      scope: invalid.illegal

  operators:
    - match: (?:\^:=)
      scope: keyword.operator.assignment.UpSetDelayed
    - match: (?:\^:)
      scope: invalid.illegal
    - match: "'"
      scope: keyword.operator.special
    - match: (?:\!(?=[\[\s@,;\]]))
      scope: invalid.printing
    # - match: (?:')
    #   scope: invalid.printing
    - match: (?:===)
      scope: keyword.operator.SameQ
    - match: (?:=!=|\.\.\.|//\.|@@@|<->|//@|=>|~!~|~~)
      scope: keyword.operator
    - match: (?:\|->)
      scope: keyword.operator.Function
    - match: (?://=)
      scope: keyword.operator.assignment.ApplyTo
    - match: (?:--|\+\+)
      scope: keyword.operator.arithmetic
    - match: (?:\|\||&&)
      scope: keyword.operator.logical
    - match: (?::=)
      scope: keyword.operator.assignment.SetDelayed
    - match: (?:\^=)
      scope: keyword.operator.assignment.UpSet
    - match: (?:/=)
      scope: keyword.operator.assignment.DivideBy
    - match: (?:\+=)
      scope: keyword.operator.assignment.AddTo
    - match: (?:=\s+\.(?![0-9]))
      scope: invalid.whitespace.Unset
    - match: (?:=\.(?![0-9]))
      scope: keyword.operator.assignment.Unset
    - match: (?:\*=)
      scope: keyword.operator.assignment.TimesBy
    - match: (?:-=)
      scope: keyword.operator.assignment.SubtractFrom
    - match: (?:/:)
      scope: keyword.operator.assignment.Tag
    - match: (?:;;)$
      scope: invalid.endofline.Span
    - match: (?:;;)
      scope: keyword.operator.Span
    - match: (?:!=)
      scope: keyword.operator.Unequal
    - match: (?:==)
      scope: keyword.operator.Equal
    - match: (?:!!)
      scope: keyword.operator.BangBang
    - match: (?:\?\?)
      scope: invalid.illegal.Information
    - match: (?:<=>)
      scope: keyword.operator
    - match: (?:<=|>=|\.\.|:>|<>|->|/@|/;|/\.|//|/\*|@@|@\*|~~|\*\*)
      scope: keyword.operator
    - match: (?:-|\+|/|\*)
      scope: keyword.operator.arithmetic
    - match: (?:=)
      scope: keyword.operator.assignment.Set
    - match: (?:<)
      scope: keyword.operator.Less
    - match: (?:\|)
      scope: keyword.operator.Alternatives
    - match: (?:!)
      scope: keyword.operator.Bang
    - match: (?:;)
      scope: keyword.operator.CompoundExpression punctuation.terminator
    - match: (?:,)
      scope: keyword.operator.Comma punctuation.separator
    - match: ^(?:\?)
      scope: invalid.startofline.Information
    - match: (?:\?)
      scope: keyword.operator.PatternTest
    - match: (?:')
      scope: keyword.operator.Derivative
    - match: (?:&)
      scope: keyword.operator.Function
    - match: (?:>|\^|\.|:|@|~)
      scope: keyword.operator

  user_symbols:

    - match: '{{symbolSegment}}(?:`{{symbolSegment}})+(?=\s*(\[(?!\s*\[)|@(?!@)))'
      scope: fn.local
    - match: '{{symbolSegment}}(?:`{{symbolSegment}})+'
      scope: sym.unk
    - match: '(?:`{{symbolSegment}})+(?=\s*(\[(?!\s*\[)|@(?!@)))'
      scope: var.function
    - match: '(?:`{{symbolSegment}})+'
      scope: sym.unk
    - match: '[$]{{symbolSegment}}[$]'
      scope: sym.dummy
    - match: '[$][A-Z]{{symbolSegment}}'
      scope: var.global.unk
    - match: '[$]{{symbolSegment}}'
      scope: var.global
    - match: '[a-z][A-Z0-9]+\$(?![`$[:alnum:]])'
      scope: var.local.pat
    - match: '{{symbolSegment}}(?=_|:[^:])'
      scope: var.local.pat
    - match: '[A-Z]{{symbolSegment}}'
      scope: var.local.unk
    - match: '{{symbolSegment}}'
      scope: var.local

#symbolSegment: (?:[$[:alpha:]][$[:alnum:]]*)
#  symbolEndBoundary: (?![`$[:alnum:]])

  invalid_symbols:
    - match: '{{symbolSegment}}`'
      scope: invalid.illegal
    - match: '`'
      scope: invalid.illegal

  unexpected_sym:
    - match: '{{symbolSegment}}{{symbolEndBoundary}}'
      pop: true
      scope: sym.unexpected

#########################################################################################################
#########################################################################################################
#########################################################################################################
#########################################################################################################
#########################################################################################################

  library_symbols:
"#library_symbols"

  library_sym:
"#library_sym"

  core_symbols:
"#core_symbols"

  core_sym:
"#core_sym"

  builtin_symbols:
"#builtin_symbols"

  builtin_sym:
"#builtin_sym"

  internal_symbols:
"#internal_symbols"

    # - match: '{{symbolSegment}}(?=\s*(\[(?!\s*\[)|@(?!@)))'
    #   scope: variable.function

  groups:
    - match: \\\)
      scope: invalid.illegal.stray-linearsyntaxparens-end
    - match: \)
      scope: invalid.illegal.stray-parens-end
    - match: \[\s+\[
      scope: invalid.whitespace.Part
    - match: \]\s+\]
      scope: invalid.whitespace.Part
    - match: \]\]
      scope: invalid.illegal.stray-parts-end
    - match: \]
      scope: invalid.illegal.stray-brackets-end
    - match: \}
      scope: invalid.illegal.stray-braces-end
    - match: \|>
      scope: invalid.illegal.stray-associations-end
    - include: linearsyntaxparen_group
    - include: paren_group
    - include: part_group
    - include: bracket_group
    - include: brace_group
    - include: association_group

  linearsyntaxparen_group:
    - match: \\\(
      scope: punctuation.section.linearsyntaxparens.begin
      push:
        - meta_scope: meta.linearsyntaxparens
        - match: \\\)
          scope: punctuation.section.linearsyntaxparens.end
          pop: true
        - include: expressions

  paren_group:
    - match: \(
      scope: punctuation.section.parens.begin
      push:
        - meta_scope: meta.parens
        - match: \)
          scope: punctuation.section.parens.end
          pop: true
        - include: expressions

  part_group:
    - match: \[\[
      scope: punctuation.section.parts.begin
      push:
        - meta_scope: meta.parts
        - match: \]\]
          scope: punctuation.section.parts.end
          pop: true
        - include: expressions

  bracket_group:
    - match: ::\[|\[
      scope: punctuation.section.brackets.begin
      push:
        - meta_scope: meta.brackets
        - match: \]
          scope: punctuation.section.brackets.end
          pop: true
        - include: expressions

  brace_group:
    - match: \{
      scope: punctuation.section.braces.begin
      push:
        - meta_scope: meta.braces
        - match: \}
          scope: punctuation.section.braces.end
          pop: true
        - include: expressions

  association_group:
    - match: <\|
      scope: punctuation.section.associations.begin
      push:
        - meta_scope: meta.associations
        - match: \|>
          scope: punctuation.section.associations.end
          pop: true
        - include: expressions

  pattern_operators:
    - match: ___
      scope: keyword.operator.BlankNullSequence
    - match: __
      scope: keyword.operator.BlankSequence
    - match: _\.
      scope: keyword.operator.Optional
    - match: _
      scope: keyword.operator.Blank

  out:
    - match: '%\d+'
      scope: keyword.other.Out
    - match: '%+'
      scope: keyword.other.Out

  slot:
    - match: '#[[:alpha:]][[:alnum:]]*'
      scope: keyword.other.Slot
    - match: '##\d*'
      scope: keyword.other.SlotSequence
    - match: '#\d*'
      scope: keyword.other.Slot

variables:
  symbolSegment: (?:[$[:alpha:]][$[:alnum:]]*)
  symbolEndBoundary: (?![`$[:alnum:]])

  MetaFunction: '(?:{{SystemMetaFunction}}|{{CoreMetaFunction}}|{{LibraryMetaFunction}})'
  LibraryMetaFunction: '(?=ZZZZZZ)'

"#variables"

  definitionAcceptors: (?:MakeBox|CoreBox|SystemBox|MakeBoxes|CoreBoxes|TypeBoxes|FieldBoxes|TermBoxes)

  systemLongNames_F: (?:F(?:ormalA|ormalAlpha|ormalB|ormalBeta|ormalC|ormalCapitalA|ormalCapitalAlpha|ormalCapitalB|ormalCapitalBeta|ormalCapitalC|ormalCapitalChi|ormalCapitalD|ormalCapitalDelta|ormalCapitalDigamma|ormalCapitalE|ormalCapitalEpsilon|ormalCapitalEta|ormalCapitalF|ormalCapitalG|ormalCapitalGamma|ormalCapitalH|ormalCapitalI|ormalCapitalIota|ormalCapitalJ|ormalCapitalK|ormalCapitalKappa|ormalCapitalKoppa|ormalCapitalL|ormalCapitalLambda|ormalCapitalM|ormalCapitalMu|ormalCapitalN|ormalCapitalNu|ormalCapitalO|ormalCapitalOmega|ormalCapitalOmicron|ormalCapitalP|ormalCapitalPhi|ormalCapitalPi|ormalCapitalPsi|ormalCapitalQ|ormalCapitalR|ormalCapitalRho|ormalCapitalS|ormalCapitalSampi|ormalCapitalSigma|ormalCapitalStigma|ormalCapitalT|ormalCapitalTau|ormalCapitalTheta|ormalCapitalU|ormalCapitalUpsilon|ormalCapitalV|ormalCapitalW|ormalCapitalX|ormalCapitalXi|ormalCapitalY|ormalCapitalZ|ormalCapitalZeta|ormalChi|ormalCurlyCapitalUpsilon|ormalCurlyEpsilon|ormalCurlyKappa|ormalCurlyPhi|ormalCurlyPi|ormalCurlyRho|ormalCurlyTheta|ormalD|ormalDelta|ormalDigamma|ormalE|ormalEpsilon|ormalEta|ormalF|ormalFinalSigma|ormalG|ormalGamma|ormalH|ormalI|ormalIota|ormalJ|ormalK|ormalKappa|ormalKoppa|ormalL|ormalLambda|ormalM|ormalMu|ormalN|ormalNu|ormalO|ormalOmega|ormalOmicron|ormalP|ormalPhi|ormalPi|ormalPsi|ormalQ|ormalR|ormalRho|ormalS|ormalSampi|ormalScriptA|ormalScriptB|ormalScriptC|ormalScriptCapitalA|ormalScriptCapitalB|ormalScriptCapitalC|ormalScriptCapitalD|ormalScriptCapitalE|ormalScriptCapitalF|ormalScriptCapitalG|ormalScriptCapitalH|ormalScriptCapitalI|ormalScriptCapitalJ|ormalScriptCapitalK|ormalScriptCapitalL|ormalScriptCapitalM|ormalScriptCapitalN|ormalScriptCapitalO|ormalScriptCapitalP|ormalScriptCapitalQ|ormalScriptCapitalR|ormalScriptCapitalS|ormalScriptCapitalT|ormalScriptCapitalU|ormalScriptCapitalV|ormalScriptCapitalW|ormalScriptCapitalX|ormalScriptCapitalY|ormalScriptCapitalZ|ormalScriptD|ormalScriptE|ormalScriptF|ormalScriptG|ormalScriptH|ormalScriptI|ormalScriptJ|ormalScriptK|ormalScriptL|ormalScriptM|ormalScriptN|ormalScriptO|ormalScriptP|ormalScriptQ|ormalScriptR|ormalScriptS|ormalScriptT|ormalScriptU|ormalScriptV|ormalScriptW|ormalScriptX|ormalScriptY|ormalScriptZ|ormalSigma|ormalStigma|ormalT|ormalTau|ormalTheta|ormalU|ormalUpsilon|ormalV|ormalW|ormalX|ormalXi|ormalY|ormalZ|ormalZeta))
  systemLongNames_S: (?:S(?:ystemsModelDelay))

  specialLongNames_D: (?:D(?:egree))
  specialLongNames_E: (?:E(?:xponentialE))
  specialLongNames_I: (?:I(?:maginaryI|maginaryJ|nfinity))
  specialLongNames_P: (?:P(?:i))

  freeLongNames_A: (?:A(?:Acute|Bar|Cup|DoubleDot|E|Grave|Hat|Ring|Tilde|leph|liasDelimiter|liasIndicator|lignmentMarker|lpha|ltKey|nd|ngle|ngstrom|pplication|quariusSign|riesSign|scendingEllipsis|utoLeftMatch|utoOperand|utoPlaceholder|utoRightMatch|utoSpace))
  freeLongNames_B: (?:B(?:ackslash|eamedEighthNote|eamedSixteenthNote|ecause|et|eta|lackBishop|lackKing|lackKnight|lackPawn|lackQueen|lackRook|reve|ullet))
  freeLongNames_C: (?:C(?:Acute|Cedilla|Hacek|ancerSign|ap|apitalAAcute|apitalABar|apitalACup|apitalADoubleDot|apitalAE|apitalAGrave|apitalAHat|apitalARing|apitalATilde|apitalAlpha|apitalBeta|apitalCAcute|apitalCCedilla|apitalCHacek|apitalChi|apitalDHacek|apitalDelta|apitalDifferentialD|apitalDigamma|apitalEAcute|apitalEBar|apitalECup|apitalEDoubleDot|apitalEGrave|apitalEHacek|apitalEHat|apitalEpsilon|apitalEta|apitalEth|apitalGamma|apitalIAcute|apitalICup|apitalIDoubleDot|apitalIGrave|apitalIHat|apitalIota|apitalKappa|apitalKoppa|apitalLSlash|apitalLambda|apitalMu|apitalNHacek|apitalNTilde|apitalNu|apitalOAcute|apitalODoubleAcute|apitalODoubleDot|apitalOE|apitalOGrave|apitalOHat|apitalOSlash|apitalOTilde|apitalOmega|apitalOmicron|apitalPhi|apitalPi|apitalPsi|apitalRHacek|apitalRho|apitalSHacek|apitalSampi|apitalSigma|apitalStigma|apitalTHacek|apitalTau|apitalTheta|apitalThorn|apitalUAcute|apitalUDoubleAcute|apitalUDoubleDot|apitalUGrave|apitalUHat|apitalURing|apitalUpsilon|apitalXi|apitalYAcute|apitalZHacek|apitalZeta|apricornSign|edilla|ent|enterDot|enterEllipsis|heckedBox|heckmark|heckmarkedBox|hi|ircleDot|ircleMinus|irclePlus|ircleTimes|lockwiseContourIntegral|loseCurlyDoubleQuote|loseCurlyQuote|loverLeaf|lubSuit|olon|ommandKey|onditioned|ongruent|onjugate|onjugateTranspose|onstantC|ontinuation|ontourIntegral|ontrolKey|oproduct|opyright|ounterClockwiseContourIntegral|ross|ubeRoot|up|upCap|urlyCapitalUpsilon|urlyEpsilon|urlyKappa|urlyPhi|urlyPi|urlyRho|urlyTheta|urrency))
  freeLongNames_D: (?:D(?:Hacek|agger|alet|ash|egree|el|eleteKey|elta|escendingEllipsis|iameter|iamond|iamondSuit|ifferenceDelta|ifferentialD|igamma|irectedEdge|iscreteRatio|iscreteShift|iscretionaryHyphen|iscretionaryLineSeparator|iscretionaryPageBreakAbove|iscretionaryPageBreakBelow|iscretionaryParagraphSeparator|istributed|ivide|ivides|otEqual|otlessI|otlessJ|ottedSquare|oubleContourIntegral|oubleDagger|oubleDot|oubleDownArrow|oubleLeftArrow|oubleLeftRightArrow|oubleLeftTee|oubleLongLeftArrow|oubleLongLeftRightArrow|oubleLongRightArrow|oublePrime|oubleRightArrow|oubleRightTee|oubleStruckA|oubleStruckB|oubleStruckC|oubleStruckCapitalA|oubleStruckCapitalB|oubleStruckCapitalC|oubleStruckCapitalD|oubleStruckCapitalE|oubleStruckCapitalF|oubleStruckCapitalG|oubleStruckCapitalH|oubleStruckCapitalI|oubleStruckCapitalJ|oubleStruckCapitalK|oubleStruckCapitalL|oubleStruckCapitalM|oubleStruckCapitalN|oubleStruckCapitalO|oubleStruckCapitalP|oubleStruckCapitalQ|oubleStruckCapitalR|oubleStruckCapitalS|oubleStruckCapitalT|oubleStruckCapitalU|oubleStruckCapitalV|oubleStruckCapitalW|oubleStruckCapitalX|oubleStruckCapitalY|oubleStruckCapitalZ|oubleStruckD|oubleStruckE|oubleStruckEight|oubleStruckF|oubleStruckFive|oubleStruckFour|oubleStruckG|oubleStruckH|oubleStruckI|oubleStruckJ|oubleStruckK|oubleStruckL|oubleStruckM|oubleStruckN|oubleStruckNine|oubleStruckO|oubleStruckOne|oubleStruckP|oubleStruckQ|oubleStruckR|oubleStruckS|oubleStruckSeven|oubleStruckSix|oubleStruckT|oubleStruckThree|oubleStruckTwo|oubleStruckU|oubleStruckV|oubleStruckW|oubleStruckX|oubleStruckY|oubleStruckZ|oubleStruckZero|oubleUpArrow|oubleUpDownArrow|oubleVerticalBar|oubledGamma|oubledPi|ownArrow|ownArrowBar|ownArrowUpArrow|ownBreve|ownExclamation|ownLeftRightVector|ownLeftTeeVector|ownLeftVector|ownLeftVectorBar|ownPointer|ownQuestion|ownRightTeeVector|ownRightVector|ownRightVectorBar|ownTee|ownTeeArrow))
  freeLongNames_E: (?:E(?:Acute|Bar|Cup|DoubleDot|Grave|Hacek|Hat|arth|ighthNote|lement|llipsis|mptyCircle|mptyDiamond|mptyDownTriangle|mptyRectangle|mptySet|mptySmallCircle|mptySmallSquare|mptySquare|mptyUpTriangle|mptyVerySmallSquare|nterKey|ntityEnd|ntityStart|psilon|qual|qualTilde|quilibrium|quivalent|rrorIndicator|scapeKey|ta|th|uro|xists|xponentialE))
  freeLongNames_F: (?:F(?:iLigature|illedCircle|illedDiamond|illedDownTriangle|illedLeftTriangle|illedRectangle|illedRightTriangle|illedSmallCircle|illedSmallSquare|illedSquare|illedUpTriangle|illedVerySmallSquare|inalSigma|irstPage|ivePointedStar|lLigature|lat|lorin|orAll|ormalA|ormalAlpha|ormalB|ormalBeta|ormalC|ormalCapitalA|ormalCapitalAlpha|ormalCapitalB|ormalCapitalBeta|ormalCapitalC|ormalCapitalChi|ormalCapitalD|ormalCapitalDelta|ormalCapitalDigamma|ormalCapitalE|ormalCapitalEpsilon|ormalCapitalEta|ormalCapitalF|ormalCapitalG|ormalCapitalGamma|ormalCapitalH|ormalCapitalI|ormalCapitalIota|ormalCapitalJ|ormalCapitalK|ormalCapitalKappa|ormalCapitalKoppa|ormalCapitalL|ormalCapitalLambda|ormalCapitalM|ormalCapitalMu|ormalCapitalN|ormalCapitalNu|ormalCapitalO|ormalCapitalOmega|ormalCapitalOmicron|ormalCapitalP|ormalCapitalPhi|ormalCapitalPi|ormalCapitalPsi|ormalCapitalQ|ormalCapitalR|ormalCapitalRho|ormalCapitalS|ormalCapitalSampi|ormalCapitalSigma|ormalCapitalStigma|ormalCapitalT|ormalCapitalTau|ormalCapitalTheta|ormalCapitalU|ormalCapitalUpsilon|ormalCapitalV|ormalCapitalW|ormalCapitalX|ormalCapitalXi|ormalCapitalY|ormalCapitalZ|ormalCapitalZeta|ormalChi|ormalCurlyCapitalUpsilon|ormalCurlyEpsilon|ormalCurlyKappa|ormalCurlyPhi|ormalCurlyPi|ormalCurlyRho|ormalCurlyTheta|ormalD|ormalDelta|ormalDigamma|ormalE|ormalEpsilon|ormalEta|ormalF|ormalFinalSigma|ormalG|ormalGamma|ormalH|ormalI|ormalIota|ormalJ|ormalK|ormalKappa|ormalKoppa|ormalL|ormalLambda|ormalM|ormalMu|ormalN|ormalNu|ormalO|ormalOmega|ormalOmicron|ormalP|ormalPhi|ormalPi|ormalPsi|ormalQ|ormalR|ormalRho|ormalS|ormalSampi|ormalScriptA|ormalScriptB|ormalScriptC|ormalScriptCapitalA|ormalScriptCapitalB|ormalScriptCapitalC|ormalScriptCapitalD|ormalScriptCapitalE|ormalScriptCapitalF|ormalScriptCapitalG|ormalScriptCapitalH|ormalScriptCapitalI|ormalScriptCapitalJ|ormalScriptCapitalK|ormalScriptCapitalL|ormalScriptCapitalM|ormalScriptCapitalN|ormalScriptCapitalO|ormalScriptCapitalP|ormalScriptCapitalQ|ormalScriptCapitalR|ormalScriptCapitalS|ormalScriptCapitalT|ormalScriptCapitalU|ormalScriptCapitalV|ormalScriptCapitalW|ormalScriptCapitalX|ormalScriptCapitalY|ormalScriptCapitalZ|ormalScriptD|ormalScriptE|ormalScriptF|ormalScriptG|ormalScriptH|ormalScriptI|ormalScriptJ|ormalScriptK|ormalScriptL|ormalScriptM|ormalScriptN|ormalScriptO|ormalScriptP|ormalScriptQ|ormalScriptR|ormalScriptS|ormalScriptT|ormalScriptU|ormalScriptV|ormalScriptW|ormalScriptX|ormalScriptY|ormalScriptZ|ormalSigma|ormalStigma|ormalT|ormalTau|ormalTheta|ormalU|ormalUpsilon|ormalV|ormalW|ormalX|ormalXi|ormalY|ormalZ|ormalZeta|reakedSmiley|unction))
  freeLongNames_G: (?:G(?:amma|eminiSign|imel|othicA|othicB|othicC|othicCapitalA|othicCapitalB|othicCapitalC|othicCapitalD|othicCapitalE|othicCapitalF|othicCapitalG|othicCapitalH|othicCapitalI|othicCapitalJ|othicCapitalK|othicCapitalL|othicCapitalM|othicCapitalN|othicCapitalO|othicCapitalP|othicCapitalQ|othicCapitalR|othicCapitalS|othicCapitalT|othicCapitalU|othicCapitalV|othicCapitalW|othicCapitalX|othicCapitalY|othicCapitalZ|othicD|othicE|othicEight|othicF|othicFive|othicFour|othicG|othicH|othicI|othicJ|othicK|othicL|othicM|othicN|othicNine|othicO|othicOne|othicP|othicQ|othicR|othicS|othicSeven|othicSix|othicT|othicThree|othicTwo|othicU|othicV|othicW|othicX|othicY|othicZ|othicZero|rayCircle|raySquare|reaterEqual|reaterEqualLess|reaterFullEqual|reaterGreater|reaterLess|reaterSlantEqual|reaterTilde))
  freeLongNames_H: (?:H(?:Bar|acek|appySmiley|eartSuit|ermitianConjugate|orizontalLine|umpDownHump|umpEqual|yphen))
  freeLongNames_I: (?:I(?:Acute|Cup|DoubleDot|Grave|Hat|maginaryI|maginaryJ|mplicitPlus|mplies|ndentingNewLine|nfinity|ntegral|ntersection|nvisibleApplication|nvisibleComma|nvisiblePostfixScriptBase|nvisiblePrefixScriptBase|nvisibleSpace|nvisibleTimes|ota))
  freeLongNames_J: (?:J(?:upiter))
  freeLongNames_K: (?:K(?:appa|ernelIcon|eyBar|oppa))
  freeLongNames_L: (?:L(?:Slash|ambda|astPage|eftAngleBracket|eftArrow|eftArrowBar|eftArrowRightArrow|eftAssociation|eftBracketingBar|eftCeiling|eftDoubleBracket|eftDoubleBracketingBar|eftDownTeeVector|eftDownVector|eftDownVectorBar|eftFloor|eftGuillemet|eftModified|eftPointer|eftRightArrow|eftRightVector|eftSkeleton|eftTee|eftTeeArrow|eftTeeVector|eftTriangle|eftTriangleBar|eftTriangleEqual|eftUpDownVector|eftUpTeeVector|eftUpVector|eftUpVectorBar|eftVector|eftVectorBar|eoSign|essEqual|essEqualGreater|essFullEqual|essGreater|essLess|essSlantEqual|essTilde|etterSpace|ibraSign|ightBulb|imit|ineSeparator|ongDash|ongEqual|ongLeftArrow|ongLeftRightArrow|ongRightArrow|owerLeftArrow|owerRightArrow))
  freeLongNames_M: (?:M(?:ars|athematicaIcon|axLimit|easuredAngle|ediumSpace|ercury|ho|icro|inLimit|inusPlus|od1Key|od2Key|u))
  freeLongNames_N: (?:N(?:Hacek|Tilde|and|atural|egativeMediumSpace|egativeThickSpace|egativeThinSpace|egativeVeryThinSpace|eptune|estedGreaterGreater|estedLessLess|eutralSmiley|ewLine|oBreak|onBreakingSpace|or|ot|otCongruent|otCupCap|otDoubleVerticalBar|otElement|otEqual|otEqualTilde|otExists|otGreater|otGreaterEqual|otGreaterFullEqual|otGreaterGreater|otGreaterLess|otGreaterSlantEqual|otGreaterTilde|otHumpDownHump|otHumpEqual|otLeftTriangle|otLeftTriangleBar|otLeftTriangleEqual|otLess|otLessEqual|otLessFullEqual|otLessGreater|otLessLess|otLessSlantEqual|otLessTilde|otNestedGreaterGreater|otNestedLessLess|otPrecedes|otPrecedesEqual|otPrecedesSlantEqual|otPrecedesTilde|otReverseElement|otRightTriangle|otRightTriangleBar|otRightTriangleEqual|otSquareSubset|otSquareSubsetEqual|otSquareSuperset|otSquareSupersetEqual|otSubset|otSubsetEqual|otSucceeds|otSucceedsEqual|otSucceedsSlantEqual|otSucceedsTilde|otSuperset|otSupersetEqual|otTilde|otTildeEqual|otTildeFullEqual|otTildeTilde|otVerticalBar|u|ull|umberSign))
  freeLongNames_O: (?:O(?:Acute|DoubleAcute|DoubleDot|E|Grave|Hat|Slash|Tilde|mega|micron|penCurlyDoubleQuote|penCurlyQuote|ptionKey|r|verBrace|verBracket|verParenthesis))
  freeLongNames_P: (?:P(?:aragraph|aragraphSeparator|artialD|ermutationProduct|erpendicular|hi|i|iecewise|iscesSign|laceholder|lusMinus|luto|recedes|recedesEqual|recedesSlantEqual|recedesTilde|rime|roduct|roportion|roportional|si))
  freeLongNames_Q: (?:Q(?:uarterNote))
  freeLongNames_R: (?:R(?:Hacek|awAmpersand|awAt|awBackquote|awBackslash|awColon|awComma|awDash|awDollar|awDot|awDoubleQuote|awEqual|awEscape|awExclamation|awGreater|awLeftBrace|awLeftBracket|awLeftParenthesis|awLess|awNumberSign|awPercent|awPlus|awQuestion|awQuote|awReturn|awRightBrace|awRightBracket|awRightParenthesis|awSemicolon|awSlash|awSpace|awStar|awTab|awTilde|awUnderscore|awVerticalBar|awWedge|egisteredTrademark|eturnIndicator|eturnKey|everseDoublePrime|everseElement|everseEquilibrium|eversePrime|everseUpEquilibrium|ho|ightAngle|ightAngleBracket|ightArrow|ightArrowBar|ightArrowLeftArrow|ightAssociation|ightBracketingBar|ightCeiling|ightDoubleBracket|ightDoubleBracketingBar|ightDownTeeVector|ightDownVector|ightDownVectorBar|ightFloor|ightGuillemet|ightModified|ightPointer|ightSkeleton|ightTee|ightTeeArrow|ightTeeVector|ightTriangle|ightTriangleBar|ightTriangleEqual|ightUpDownVector|ightUpTeeVector|ightUpVector|ightUpVectorBar|ightVector|ightVectorBar|oundImplies|oundSpaceIndicator|ule|uleDelayed|upee))
  freeLongNames_S: (?:S(?:Hacek|Z|adSmiley|agittariusSign|ampi|aturn|corpioSign|criptA|criptB|criptC|criptCapitalA|criptCapitalB|criptCapitalC|criptCapitalD|criptCapitalE|criptCapitalF|criptCapitalG|criptCapitalH|criptCapitalI|criptCapitalJ|criptCapitalK|criptCapitalL|criptCapitalM|criptCapitalN|criptCapitalO|criptCapitalP|criptCapitalQ|criptCapitalR|criptCapitalS|criptCapitalT|criptCapitalU|criptCapitalV|criptCapitalW|criptCapitalX|criptCapitalY|criptCapitalZ|criptD|criptDotlessI|criptDotlessJ|criptE|criptEight|criptF|criptFive|criptFour|criptG|criptH|criptI|criptJ|criptK|criptL|criptM|criptN|criptNine|criptO|criptOne|criptP|criptQ|criptR|criptS|criptSeven|criptSix|criptT|criptThree|criptTwo|criptU|criptV|criptW|criptX|criptY|criptZ|criptZero|ection|electionPlaceholder|hah|harp|hiftKey|hortDownArrow|hortLeftArrow|hortRightArrow|hortUpArrow|igma|ixPointedStar|keletonIndicator|mallCircle|paceIndicator|paceKey|padeSuit|panFromAbove|panFromBoth|panFromLeft|phericalAngle|qrt|quare|quareIntersection|quareSubset|quareSubsetEqual|quareSuperset|quareSupersetEqual|quareUnion|tar|terling|tigma|ubset|ubsetEqual|ucceeds|ucceedsEqual|ucceedsSlantEqual|ucceedsTilde|uchThat|um|uperset|upersetEqual|ystemEnterKey|ystemsModelDelay))
  freeLongNames_T: (?:T(?:Hacek|abKey|au|aurusSign|ensorProduct|ensorWedge|herefore|heta|hickSpace|hinSpace|horn|ilde|ildeEqual|ildeFullEqual|ildeTilde|imes|rademark|ranspose|ripleDot|woWayRule))
  freeLongNames_U: (?:U(?:Acute|DoubleAcute|DoubleDot|Grave|Hat|Ring|nderBrace|nderBracket|nderParenthesis|ndirectedEdge|nion|nionPlus|pArrow|pArrowBar|pArrowDownArrow|pDownArrow|pEquilibrium|pPointer|pTee|pTeeArrow|pperLeftArrow|pperRightArrow|psilon|ranus))
  freeLongNames_V: (?:V(?:ectorGreater|ectorGreaterEqual|ectorLess|ectorLessEqual|ee|enus|erticalBar|erticalEllipsis|erticalLine|erticalSeparator|erticalTilde|eryThinSpace|irgoSign))
  freeLongNames_W: (?:W(?:arningSign|atchIcon|edge|eierstrassP|hiteBishop|hiteKing|hiteKnight|hitePawn|hiteQueen|hiteRook|olf|olframLanguageLogo|olframLanguageLogoCircle))
  freeLongNames_X: (?:X(?:i|nor|or))
  freeLongNames_Y: (?:Y(?:Acute|DoubleDot|en))
  freeLongNames_Z: (?:Z(?:Hacek|eta))

  unsupportedLongNames_C: (?:C(?:OMPATIBILITYKanjiSpace|OMPATIBILITYNoBreak))
  unsupportedLongNames_I: (?:I(?:nlinePart))

  punctuationChar: (?:!|&|'|\*|\+|,|-|\.|/|:|;|<|=|>|\?|@|\\|\^|\||~)
  binary: (?:(?:0|1)+(?:\.(?!\.)(?:0|1)*)?+|\.(?!\.)(?:0|1)+)
  octal: (?:(?:0|1|2|3|4|5|6|7)+(?:\.(?!\.)(?:0|1|2|3|4|5|6|7)*)?+|\.(?!\.)(?:0|1|2|3|4|5|6|7)+)
  decimal: (?:\d+(?:\.(?!\.)\d*)?+|\.(?!\.)\d+)
  hexadecimal: (?:\h+(?:\.(?!\.)\h*)?+|\.(?!\.)\h+)
  precision: (?:`(?:(?:-|\+)?+(?:\d+(?:\.(?!\.)\d*)?+|\.(?!\.)\d+))?+)
  accuracy: (?:``(?:(?:-|\+)?+(?:\d+(?:\.(?!\.)\d*)?+|\.(?!\.)\d+)))
  exponent: (?:\*\^(?:-|\+)?+\d+)

  applied:         '(?:\[| @ )'
  mutilineApplied: '(?:\[\s*\n)'

  defineMacro:   '(?:Define[A-Za-z]+Macro)'
  declareFn:     '(?:(?:SetBox|SetForm|SetCore|SetHold|SetPred|SetCurry|SetStrict|SetExcepting|Declare)[A-Za-z0-9]*)'
  defineRulesFn: '(?:Define[A-Za-z]+Rules)'
  definitionsFn: '(?:[A-Za-z]+Definitions)'


  defineMacroApplied:   '(?={{defineMacro}}{{applied}})'
  declareFnApplied:     '(?={{declareFn}}{{applied}})'
  defineRulesFnApplied: '(?={{defineRulesFn}}{{applied}})'
  definitionsFnApplied: '(?={{definitionsFn}}{{mutilineApplied}})'
